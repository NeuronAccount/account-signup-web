"use strict";
/**
 * Account Private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost/private-api/v1/accounts".replace(/\/+$/, "");
var BaseAPI = /** @class */ (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreator = {
    /**
     *
     * @summary
     * @param name
     * @param password
     */
    login: function (params, options) {
        // verify required parameter "name" is set
        if (params["name"] == null) {
            throw new Error("Missing required parameter name when calling login");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling login");
        }
        var baseUrl = "/login";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params["name"],
            "password": params["password"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param jwt
     */
    logout: function (params, options) {
        // verify required parameter "jwt" is set
        if (params["jwt"] == null) {
            throw new Error("Missing required parameter jwt when calling logout");
        }
        var baseUrl = "/logout";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "jwt": params["jwt"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param scene
     * @param phone
     * @param captchaId
     * @param captchaCode
     */
    smsCode: function (params, options) {
        // verify required parameter "scene" is set
        if (params["scene"] == null) {
            throw new Error("Missing required parameter scene when calling smsCode");
        }
        // verify required parameter "phone" is set
        if (params["phone"] == null) {
            throw new Error("Missing required parameter phone when calling smsCode");
        }
        var baseUrl = "/smsCode";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "scene": params["scene"],
            "phone": params["phone"],
            "captchaId": params["captchaId"],
            "captchaCode": params["captchaCode"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary sms login
     * @param phone
     * @param smsCode
     */
    smsLogin: function (params, options) {
        // verify required parameter "phone" is set
        if (params["phone"] == null) {
            throw new Error("Missing required parameter phone when calling smsLogin");
        }
        // verify required parameter "smsCode" is set
        if (params["smsCode"] == null) {
            throw new Error("Missing required parameter smsCode when calling smsLogin");
        }
        var baseUrl = "/smsLogin";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "phone": params["phone"],
            "smsCode": params["smsCode"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary sms signup
     * @param phone
     * @param smsCode
     * @param password
     */
    smsSignup: function (params, options) {
        // verify required parameter "phone" is set
        if (params["phone"] == null) {
            throw new Error("Missing required parameter phone when calling smsSignup");
        }
        // verify required parameter "smsCode" is set
        if (params["smsCode"] == null) {
            throw new Error("Missing required parameter smsCode when calling smsSignup");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling smsSignup");
        }
        var baseUrl = "/smsSignup";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "phone": params["phone"],
            "smsCode": params["smsCode"],
            "password": params["password"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     *
     * @summary
     * @param name
     * @param password
     */
    login: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.login(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param jwt
     */
    logout: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.logout(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param scene
     * @param phone
     * @param captchaId
     * @param captchaCode
     */
    smsCode: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.smsCode(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary sms login
     * @param phone
     * @param smsCode
     */
    smsLogin: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.smsLogin(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary sms signup
     * @param phone
     * @param smsCode
     * @param password
     */
    smsSignup: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.smsSignup(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary
     * @param name
     * @param password
     */
    DefaultApi.prototype.login = function (params, options) {
        return exports.DefaultApiFp.login(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param jwt
     */
    DefaultApi.prototype.logout = function (params, options) {
        return exports.DefaultApiFp.logout(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param scene
     * @param phone
     * @param captchaId
     * @param captchaCode
     */
    DefaultApi.prototype.smsCode = function (params, options) {
        return exports.DefaultApiFp.smsCode(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary sms login
     * @param phone
     * @param smsCode
     */
    DefaultApi.prototype.smsLogin = function (params, options) {
        return exports.DefaultApiFp.smsLogin(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary sms signup
     * @param phone
     * @param smsCode
     * @param password
     */
    DefaultApi.prototype.smsSignup = function (params, options) {
        return exports.DefaultApiFp.smsSignup(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary
         * @param name
         * @param password
         */
        login: function (params, options) {
            return exports.DefaultApiFp.login(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param jwt
         */
        logout: function (params, options) {
            return exports.DefaultApiFp.logout(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param scene
         * @param phone
         * @param captchaId
         * @param captchaCode
         */
        smsCode: function (params, options) {
            return exports.DefaultApiFp.smsCode(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary sms login
         * @param phone
         * @param smsCode
         */
        smsLogin: function (params, options) {
            return exports.DefaultApiFp.smsLogin(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary sms signup
         * @param phone
         * @param smsCode
         * @param password
         */
        smsSignup: function (params, options) {
            return exports.DefaultApiFp.smsSignup(params, options)(fetch, basePath);
        },
    };
};
